------------------------------------------
Chapter 01 파이썬 시작하기
------------------------------------------

01-1 파이썬을 하기 전에 읽는 아주 간단할 설명

3가지 키워드로 정리하는 핵심 포인트
■  컴퓨터 프로그램(Computer Program)
  : 컴퓨터가 무엇을 해야 할지 미리 작성한 진행 계획을 말한다.
■  소스 코드
  : 프로그래밍 언어로 사람이 쉽게 읽고 이해할 수 있도록 만든 코드이다.
■  파이썬 특징
  (장점)
  1) 배우기 쉽다. 2) 다양한 분야에서 활용된다.
  3) 대부분의 운영체제에서 동일하게 사용된다.
  (단점) C언어 대비 느리다.

------------------------------------------------

01-2 파이썬을 배우기 위해 준비해야 할 것들

1) 파이썬 설치(https://www.python.org)
	1-2) D2Coding 폰트 또는 나눔고딕 코딩 글꼴 설치
2) 비주얼 스튜디오 코드 설치(https://code.visualstudio.com)

4가지 키워드로 정리하는 핵심 포인트
■ 파이썬을 하려면 파이썬 코드를 입력할 수 있는 텍스트 에디터와
  파이썬 코드를 실행할 수 있는 도구인 파있너 인터프리터가 필요하다.
■  파이썬 프롬프트라 불리는 >>> 에 코드를 입력하면 바로 실행결과를 볼 수 있는데,
  이는 한 마디씩 주고받는 것처럼 대화한다고 해서
  인터렉티브 셸(대화형 셸)이라고 한다.
■  파이썬으로 작성한 파일은 해당 폴더의 명령 프롬프트에서 python 명령어로 실행할 수 있다.

------------------------------------------------

01-3 이 책에서 자주 나오는 파이썬 용어들

단어들이 모여서 구성되는 것
■ 자료 : 10, 20, 30 등 : True False
■ 연산자 : + - * / 등 : and or
■ 식별자 : 사용자가 정의한 단어
■ 키워드 : 창시자가 정의한 단어 : True False : and or

■ 스네이크 케이스와 캐멀 케이스
: 식별자에는 공백을 사용할 수 없다. 따라서 방안이 제시되었다.
    1) 스네이크 케이스(snake_case)
      : 단어 사이에 언더 바(_) 기호를 붙여 식별자를 만든다.
    2) 캐멀 케이스(CamelCase)
      : 단어들의 첫 글자를 대문자로 만들어 식별자를 만든다.

5가지 키워드로 정리하는 핵심 포인트
■ 표현식(Expression)
  : 파이썬에서는 값을 만들어 내는 간단한 코드를 표현식이라고 부른다.
■ 키워드(Keyword)
  : 의미가 부여된 특별한 단어로, 사용자가 지정하는 이름에 사용하면 안된다.
■ 식별자(Identifier)
  : 프로그래밍 언어에서 이름을 붙일 때 사용하는 단어이다.
■ 주석(Comment)
  : 프로그램을 설명하는 데 사용하며, 프로그램에는 어떠한 영향도 주지 않는다.
  : #으로 시작하면 주석처리된다.
■ print()
  : 파이썬의 가장 기본적인 출력 방법으로 괄호 안에 출력하고 싶은 것을 입력해서 사용한다.

------------------------------------------------
Chapter 02 자료형
------------------------------------------------

02-1 자료형과 문자열

■ 문자열 범위 선택 연산자(슬라이싱):[:]
>>> print("안녕하세요"[1:3])
녕하

>>> print("안녕하세요"[1:])
녕하세요

>>> print("안녕하세요"[:3])
안녕하

■ 인덱싱(indexing)
[] 연산자를 이용해 문자열의 특정 위치에 있는 문자를 참조하는 것

■ 슬라이싱(slicing)
[:] 연산자를 이용해 문자열의 일부를 추출하는 것

■ IndexError(index out of range) 예외
  리스트/문자열의 수를 넘는 요소/글자를 선택할 때 발생

■ 6가지 키워드로 정리하는 핵심 포인트
  - 자료형의 형식을 자료형이라고 한다.
  - 문자의 나열을 문자열이라고 하는데,
    문자열은 큰 따옴표 혹은 작은 따옴표로 입력한다.
  - 이스케이프 문자는 문자열 내부에서 특수한 기능을 수행하는 문자열이다.
  - type()은 자료형을 확인하는 함수이며,
    len()은 문자열의 길이를 구하는 함수이다.

------------------------------------------------

02-2 숫자

■ 숫자 연산자
- 사칙 연산자 : +,-,*,/
- 정수 나누기 연산자 : //
- 나머지 연산자 : %
- 제곱 연산자 : **

■ TypeError 예외
서로 다른 자료형을 연산하면 TypeError 라는 예외가 발생한다.

■ 4가지 키워드로 정리하는 핵심 포인트
- "숫자 자료형"에는 소수점이 없는 정수형과 소수점이 있는 실수형(부동 소수점)이 있다.
- "숫자 연산자"에는 +,-,*,/와 가틍ㄴ 사칙 연산자와
  //(정수 나누기 연산자), %(나머지 연산자), **(제곱 연산자)가 있다.
- "연산자"에는 "우선순위"가 존재한다.
    1) 곱하기와 나누기가 우선
    2) 더하기와 뺴기가 다음
    3) 잘 모를 때는 괄호를 쳐서 나타낸다.

------------------------------------------------

02-3 변수와 입력

■ 변수
  값을 저장할 때 사용하는 식별자이다.

■ input() 함수: 사용자 입력

■ int() 함수 : 문자열을 int 자료형으로 변환
■ float() 함수 : 문자열을 float 자료형으로 변환
■ str() 함수 : 숫자를 문자열로 변환하는 함수

■ ValueError 예외
  자료형을 변환할 때 '변환할 수 없는 것'을 변환하려고 하면 예외가 발생한다.
  1) 숫자가 아닌 것을 숫자로 변환하려고 할 때
    ex) int("안녕하세요")
  2) 소수점이 있는 숫자 형식의 문자열을 int() 함수로 변환하려고 할 때
    ex) int("52.273")

■ 7가지 키워드로 정리하는 핵심 포인트
- "변수 선언"은 변수를 생성하는 것을 의미하고,
  "변수 할당"은 변수에 값을 넣는 것을 의미한다.
- "변수 참조"는 변수에 값을 꺼내는 것을 의미한다.
- "input()" 함수는 명령 프롬프트에서 사용자로부터 데이터를 입력받을 떄 사용한다.
- "int()" 함수는 문자열을 int자료형으로 변환하고
  "float()" 함수는 문자열을 float 자료형으로 변환한다.
- "str()"함수는 숫자를 문자열로 변환한다.

------------------------------------------------

02-4 숫자와 문자열의 다양한 기능

■ 문자열의 format() 함수
  문자열이 가지고 있는 함수

■ 8가지 키워드로 정리하는 핵심 포인트
- "format()" 함수를 이용하면 숫자와 문자열을 다양한 형태로 출력할 수 있다.
- "upper()" 와 "lower()"함수는 문자열의 알파벳을 대문자로 혹은 소문자로 변경한다.
- "strip()" 함수는 문자열 양옆의 공백을 제거한다.
- "find()" 함수는 문자열 내부에 특정 문자가 어디에 위치하는지 찾을 때 사용한다.
- "in 연산자"는 문자열 내부에 어떤 문자열이 있는지 확인할 때 사용한다.
- "split()" 함수는 문자열을 특정한 문자열로 자를 때 사용한다.
- "f-문자열"을 사용하면 문자열 안에 값을 format() 함수보다 간단하게 삽입할 수 있다.
  ※ 파이썬 3.6 이전 버전에서 사용하면 오류가 발생한다.

------------------------------------------------
Chapter 03 조건문
------------------------------------------------

03-1 불 자료형과 if 조건문

■ 파이썬에서 줄이 너무 길어질 떄는 \ 기호를 입력하고
  줄바꿈해서 코드를 입력한다.

■ 비교 연산자
- not
  아니다 | 불을 반대로 전환한다.
- and
  그리고 | 피연산자가 모두 참일 때 True, 그 외는 모두 False 출력
- or
  또는 | 피연산자 두 개 중에 하나만 참이라도 True 출력,
  모두 거짓일 때만 False 출력.

■ datetime.datetime.now() 라는 함수로 현재의 시간을 구할 수 있다.
ex)
  import datetime
  now = datetime.datetime.now()
  print(now.year)

■ 4가지 키워드로 정리하는 핵심 포인트
- "불"은 파이썬의 기본 자료형으로 True(참)와 False(거짓)를 나타내는 값이다.
- "비교 연산자"는 숫자 또는 문자열에 적용하며, 대소를 비교하는 연산자이다.
- "논리 연산자"는 not, and, or 연산자가 있으며, 불을 만들 때 사용한다.
- "if 조건문"은 조건에 따라 코드를 실행하거나
  실행하지 않게 만들고 싶을 때 사용하는 구문이다.
  - if 문 다음 문장은 4칸 들여쓰기 후 입력한다.

------------------------------------------------

03-2 if~else와 elif 구문

■ 4가지 키워드로 정리하는 핵심 포인트
- "else 구문"은 if 조건문 뒤에 사용하며,
  if 조건문의 조건이 거짓일 때 실행한다.
- elif 구문은 if 조건문과 else 구문 사이에 입력하며,
  세 개 이상의 조건을 연결해서 사용할 때 적합하다.
- if 조건문의 조건식에서 False로 변환되는 값은
  None, 0, 0.0과 빈 문자열, 빈 바이트열, 빈리스트, 빈 튜플, 빈 딕셔너리 등이다.
- pass 키워드는 프로그래밍의 전체 골격을 잡아놓고,
  내부에 처리할 내용은 나중에 만들고자 할 때 pass라는 키워드를 사용한다.

------------------------------------------------
Chapter 04 반복문
------------------------------------------------

04-1 리스트와 반복문

■ 리스트에서 IndexError 예외
  리스트의 길이를 넘는 인덱스로 요소에 접근하려고 할 때 발생하는 예외
ex)
  >>> list_a = [273, 32, 103]
  >>> list_a[3]
  # 리스트에 [3]번째 요소가 없으므로 IndexError 예외가 발생한다.

■ 리스트에 요소 추가하기
1) 리스트 뒤에 요소를 추가
  리스트명.append(요소)

2) 리스트의 중간에 요소를 추가
  리스트명.insert(위치, 요소)

3) 한 번에 여러 요소를 추가하고 싶을 때
  리스트명.extend(요소)

■ 인덱스로 제거하기: del 키워드, pop()
1) 리스트의 특정 인덱스에 있는 요소를 제거
  del 리스트명[인덱스]

2) 매개변수를 입력하지 않으면 -1이 들어가는 것으로 취급하여
    마지막 요소를 제거한다.
  리스트명.pop(인덱스)

■ 값으로 제거하기 : remove()
  리스트 내부에 가장 먼저 발견되는 하나만 제거.
  리스트.remove(값)

■ 모두 제거하기: clear()
  리스트 내부의 요소를 모두 제거할 때 사용
  리스트.clear()

■ 리스트 정렬하기: sort()
  기본 오름차순 정렬
  리스트.sort()

■ 리스트 내부에 있는지 확인하기: in/not in 연산자
  특정 값이 리스트 내부에 있는지 확인할 때 사용
  값 in 리스트

■ 슬라이싱
  리스트에[:] 연산자로 리스트 범위를 지정하여 여러 요소를 선택하는 것
  ex)
  리스트[시작_인덱스:끝_인덱스:단계]

■ for 반복문: 리스트와 함께 사용하기
  for 반복자 in 반복할 수 있는 것:
  코드

■ 전개 연산자
  리스트 앞에 * 기호를 사용하여 리스트 요소를 전개하여 입력한 것과 같은 효과를 낸다.
  *리스트 -> 리스트[0], 리스트[1],...

■ 4가지 키워드로 정리하는 핵심 포인트
- "리스트"는 여러 가지 자료를 저장할 수 있는 자료형을 말한다.
- "요소"는 리스트 내부에 있는 각각의 내용을 의미한다.
- "인덱스"는 리스트 내부에서 값의 위치를 위미한다.
- "for 반복문"은 특정 코드를 반복해서 실행할 때 사용하는 기본적인 구문이다.

------------------------------------------------
